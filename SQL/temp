import javax.jms.BytesMessage;
import javax.jms.Message;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class JMSListenerTest {

    @Mock
    private TestDAO testDAO;

    private JMSListener jmsListener;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        jmsListener = new JMSListener(testDAO);
    }

    @Test
    public void onMessage_shouldPersistMessage() throws Exception {
        BytesMessage message = Mockito.mock(BytesMessage.class);
        Mockito.when(message.getJMSTimestamp()).thenReturn(System.currentTimeMillis());
        Mockito.when(message.getBodyLength()).thenReturn(10L);
        Mockito.when(message.getStringProperty("CHARSET")).thenReturn("UTF-8");
        Mockito.when(testDAO.persistMessage(Mockito.anyString(), Mockito.any(), Mockito.anyString(), Mockito.anyString())).thenReturn(true);

        jmsListener.onMessage(message);

        Mockito.verify(testDAO, Mockito.times(1)).persistMessage(Mockito.anyString(), Mockito.any(), Mockito.anyString(), Mockito.anyString());
    }

    @Test(expected = Exception.class)
    public void onMessage_shouldThrowException() throws Exception {
        BytesMessage message = Mockito.mock(BytesMessage.class);
        Mockito.when(message.getJMSTimestamp()).thenReturn(System.currentTimeMillis());
        Mockito.when(message.getBodyLength()).thenReturn(10L);
        Mockito.when(message.getStringProperty("CHARSET")).thenReturn("UTF-8");
        Mockito.when(testDAO.persistMessage(Mockito.anyString(), Mockito.any(), Mockito.anyString(), Mockito.anyString())).thenThrow(new Exception());

        jmsListener.onMessage(message);
    }
}
